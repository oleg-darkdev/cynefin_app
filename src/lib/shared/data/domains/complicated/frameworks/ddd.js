const frameworkDescription = {
  promoImg: '/images/domains/complicated/_promo.svg',
  id: 0,
  icon: '/images/domains/complicated/_icon.svg',
  logo: `/images/domains/complicated/_logo.svg`,
  links: {
    wiki: {
      ru: ``,
      en: `https://en.wikipedia.org/wiki/Domain-driven_design`
    },
    offisialSiteLink: `/`,
    articleLink: `/app`,
  },
  cynefinDomain: '#complicated',
  type: '#framework',
  title: 'Domain-driven design',
  abbr: `D.D.D.`,
  shortDesc: 'DDD — это подход к разработке сложных программных систем, где важным аспектом является глубокое понимание бизнес-домена (области бизнеса).',
  examples: [{title: '', link: '/'}, {title: '', link: '/'}, {title: '', link: '/'}, {title: '', link: '/'},],
  desc: [
    '',
    '',
    '',
  ],
  background: {}, brandColorText: 'complicated-domain-textColor', brandColorBg: 'complicated-domain-bgColor',
};



// Обоснование:
// Характеристика сложного домена (Complicated):

// В этом домене причинно-следственные связи понятны, но для их выявления требуется анализ и привлечение экспертов.
// Системы в этом домене сложные, но не хаотичные: с достаточным уровнем экспертизы и знания можно найти правильные решения.
// Здесь работают "хорошие практики" (good practices), которые применяются в зависимости от контекста, но не всегда универсальны.
// Решения разрабатываются на основе глубокого понимания структуры и правил системы.
// Характеристика Domain-driven design:

// Для успешного применения DDD требуется сотрудничество между техническими экспертами (разработчиками) и экспертами домена (бизнесом), что соответствует требованию привлечения экспертизы, как в сложном домене.
// DDD фокусируется на разделении системы на контексты, моделирование доменов и создание программных решений на основе этой модели — это требует анализа и структурирования, но не является полностью непредсказуемым или изменчивым, как в Complex домене.
// Почему не Complex:
// В Complex домене причинно-следственные связи не ясны заранее и проявляются только через эксперименты и адаптацию, что не полностью соответствует DDD. DDD применяет подходы, которые опираются на аналитическое понимание домена и разработку на основе этого понимания.
// Таким образом, Domain-driven design является примером методологии, которая применяется в сложных системах, где требуется экспертное знание, но анализ и моделирование позволяют найти правильные решения, что типично для Complicated домена модели Cynefin.




export default frameworkDescription
